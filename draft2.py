# -*- coding: utf-8 -*-
"""DRAFT2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BM6RFhXAmE1l596NaB1-MSgxozigZJYj
"""

import yfinance as yf
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt

# Lista de 10 compañías del Dow Jones
companies = [ "AAPL", "MSFT", "V", "PG", "JNJ", "HD", "NVDA", "UNH", "AMZN", "GOOG",
    "AXP", "BA", "CAT", "CRM", "CSCO", "CVX", "DIS", "DOW", "GS", "HON",
    "IBM", "INTC", "MMM", "MRK", "NKE", "TRV", "WBA", "WMT", "XOM", "KO"]

# Fechas de interés
start_date = '2024-01-01'
end_date = '2025-01-10'

# Descargar datos históricos
data = yf.download(companies, start=start_date, end=end_date)['Close']

# Mostrar los primeros datos
print(data.head())

# Graficar los precios de cierre ajustados
data.plot(figsize=(14, 7))
plt.title('Precio de cierre de las compañías del Dow Jones')
plt.xlabel('Fecha')
plt.ylabel('Precio de cierre')
plt.show()

# Normalización de datos
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)
scaled_data

# Crear conjuntos de entrenamiento y prueba
train_size = int(len(scaled_data) * 0.8)
train_data, test_data = scaled_data[:train_size], scaled_data[train_size:]

# Crear secuencias de tiempo
def create_sequences(data, seq_length):
    x, y = [], []
    for i in range(len(data) - seq_length):
        x.append(data[i:i + seq_length])
        y.append(data[i + seq_length])
    return np.array(x), np.array(y)

# Adjust the sequence length
seq_length = 30  # Reduced from 60

x_train, y_train = create_sequences(train_data, seq_length)
x_test, y_test = create_sequences(test_data, seq_length)
x_train.shape

# Crear y ajustar el modelo LSTM
model = Sequential()
model.add(Input(shape=(seq_length, len(companies))))
model.add(LSTM(20, return_sequences=True))
model.add(LSTM(20))
model.add(Dense(len(companies)))
model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs=10)

# Evaluación del modelo
predicted_prices = model.predict(x_test)
predicted_prices = scaler.inverse_transform(predicted_prices)
real_prices = scaler.inverse_transform(y_test)
predicted_prices